class Solution {
    public int orangesRotting(int[][] grid) {
        int count = 0;
        int row = grid.length;
        int col = grid[0].length;
        for(int i = 0;i < row;i++){
            for(int j = 0; j < col;j++){
                if(grid[i][j] == 2){
                    dfs(i,j,grid,2);
                    count ++;
                }
            }
        }
        int result=2;
        
        for(int i=0;i<row;i++){
            for (int j=0;j<col;j++){
                if(grid[i][j]==1){
                    return -1;
                }
             result = Math.max(result,grid[i][j]);
            }
        }
        return result-2;
    }
    public void dfs(int i, int j, int[][] grid,int time){
        if(i < 0 || i >= grid.length || j < 0 || j >= grid[0].length  || grid[i][j] == 0 || (1 < grid[i][j] && grid[i][j] < time)) return;
        else {
            grid[i][j] = time;
            dfs(i - 1, j, grid,time + 1);
            dfs(i + 1, j, grid,time + 1);
            dfs(i, j - 1, grid, time + 1);
            dfs(i, j + 1, grid, time + 1);
        }
    }
}
