class Solution {  
    public int swimInWater(int[][] grid) {  
        int n = grid.length;
        int low = grid[0][0];
        int high = n*n - 1;   
        while (low < high) {       
            int mid = low + ((high - low) >> 1);   
            boolean visited[][] = new boolean[n][n];
            if (dfs(grid, 0, 0, mid, visited)) {
                high = mid;
            } else {
                low = mid + 1;   
            }   
        }
        return low;   
    }
    private boolean dfs (int grid[][], int row, int col, int time, boolean visited[][]) {
        int n = grid.length;
        if (row < 0 || row >= n || col < 0 || col >= n || visited[row][col] || grid[row][col] > time) {
            return false;      
        }
        visited[row][col] = true;         
        
        if (row == n-1 && col == n-1) {
            return true;                  
        }
        return dfs(grid, row - 1, col    , time, visited) || dfs(grid, row + 1, col    , time, visited) || dfs(grid, row    , col - 1, time, visited) || dfs(grid, row    , col + 1, time, visited);
        
    }
    
    
    
}
