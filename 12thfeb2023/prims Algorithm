class Triology{
    int u;
    int v;
    int wt;
    Triology(int u,int v,int wt){
        this.u=u;
        this.v=v;
        this.wt=wt;
    }
}
class Pair{
    int v;
    int wt;
    Pair(int v,int wt){
        this.v=v;
        this.wt=wt;
    }
}
class Solution{
	static int spanningTree(int V, int E, int edges[][]){
	     List<List<Pair>> adj=new ArrayList<>();
	     for(int i=0;i<V;i++){
	         adj.add(new ArrayList<Pair>());
	     }
	     for(int i=0;i<edges.length;i++){
	         int u=edges[i][0];
	         int v=edges[i][1];
	         int wt=edges[i][2];
	         adj.get(u).add(new Pair(v,wt));
	         adj.get(v).add(new Pair(u,wt));
	     }
	     PriorityQueue<Triology> pq = new PriorityQueue<Triology>((x,y)->x.wt-y.wt);
	     pq.add(new Triology(0,0,0));
	     int[] vis=new int[V];
	     int s=0;
	     while(!pq.isEmpty()){
	         Triology node=pq.poll();
	         int u=node.u;
	         int v=node.v;
	         int wt=node.wt;
	         if(vis[v]==1) continue;
	         s+=wt;
	         vis[v]=1;
	         for(Pair it:adj.get(v)){
	             if(vis[it.v]==0){
	                 pq.add(new Triology(v,it.v,it.wt));
	             }
	         }
	     }
	     return s;
	}
}
