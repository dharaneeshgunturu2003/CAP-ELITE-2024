 Longest Substring with At Least K Repeating Characters
Given a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is greater than or equal to k.


Example 1:

Input: s = "aaabb", k = 3
Output: 3
Explanation: The longest substring is "aaa", as 'a' is repeated 3 times.

code:

class Solution {
    public int longestSubstring(String s, int k) {
       int n=s.length();
       if(n==0 || n<k)return 0;
       if(k<=1) return n;
       Map<Character,Integer> counts=new HashMap<>();
       for(char c:s.toCharArray())
       {
           counts.put(c,counts.getOrDefault(c,0)+1);
       } 
       int l=0;
       while(l<n && counts.get(s.charAt(l))>=k)l++;
       if(l>=n-1)return l;
       int ls1=longestSubstring(s.substring(0,l),k);
       while(l<n && counts.get(s.charAt(l))<k) l++;
       int ls2=(l<n) ? longestSubstring(s.substring(l),k) : 0;
       return Math.max(ls1,ls2);
    }
}
